Title: Client-Server Socket Programming Project in Networking (2002)

Author: Maan Haj Rachid

Introduction:
This project was completed as part of a Networking class at Suffolk University in 2002. It involves creating a client-server application using TCP. The client sends a hello message to the server, which responds with a status message. Afterward, the client sends a bye message, and the server replies with bye. The goal is to establish a successful connection and exchange messages between the client and the server.

Client:
The client program initiates by performing various argument checks to ensure the correct usage. The "hostname" and "port" variables are used to carry the necessary data from either the command line or the predefined settings. A log file named "clientlog" is created, and its previous contents are cleared each time the program runs.

The client prepares a message to be sent to the server and establishes a socket connection with the server using the server's address and port obtained through gethostbyname. The client then sends the prepared message to the server and logs all relevant data in the log file.

Upon receiving a response from the server, the client extracts the cookie part of the message and checks its validity. If the message is legal, the client sends a bye message to the server and logs the corresponding data. The client then reads the server's reply again and prints all the received messages on the screen.

After the bye exchange, the client gracefully closes the connection with the server.

To send a bad request using this client, one can intentionally violate the following rules:

Put a number in the first name.
Put a number in the last name.
Put a non-digit and non-letter character in the user ID.
These rules were intentionally introduced to test the client's capability to handle illegal requests.

Additionally, there exists a "bad client," which is similar to the regular client, except that the user manually enters the message (hello or bye). The reason for not using this bad client by default is to make the regular client more user-friendly by eliminating the need to input data each time.

To run the bad client, the same command used for the regular client is used, but with the word "bad" instead of "client."

Server:
The server program begins by performing checks on the command line arguments, with the "hostname" and "port" variables serving as essential pieces of information.

The server creates a log file named "serverlog" and proceeds to open a socket. The socket is then bound with a name that contains all the relevant information. The author faced some initial difficulties where the system was rejecting the default port; this issue was resolved by using the ntohs function.

After announcing the port and the machine name, the server starts listening for incoming connections in an infinite loop. When a connection is accepted, the server obtains client information through a sock_addr struct. The server extracts the client's address from the struct and retrieves the host name using gethostbyaddr. The server then prints this data in a user-friendly format on the screen.

Once the connection is established, the server starts reading from the socket and writing the received data to the log file. The function "checkandgetuid" validates the incoming message's format and extracts the user name. If the message is incorrectly formatted, the procedure is terminated, and the connection is canceled. On the other hand, if the message is valid, a "msg" is sent back to the client, including a randomly generated cookie that is practically unique. As always, the server logs all relevant information in the log file.

Subsequently, the server reads from the socket again and uses the "checkbye" function to verify if the received request for bye is legal. If the request is legitimate, the server sends a bye message back to the client and announces the end of the connection.

It is important to note that error detection is crucial, and while not all possible cases are accounted for in the script file, any alteration in spaces or the cookie number will be detected.

The demonstration of this client-server socket programming project can be observed in the "client_script" and "server_script" files.






 
